"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.dingReduxDevTool = exports.responseMiddleware = exports.requestMiddleware = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require("react-redux");

var _DevTools = require("./DevTools");

var _DevTools2 = _interopRequireDefault(_DevTools);

var _redux = require("redux");

var _reduxDevtools = require("redux-devtools");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var socket = null;

var DingDevTool = function (_Component) {
	_inherits(DingDevTool, _Component);

	function DingDevTool(props) {
		_classCallCheck(this, DingDevTool);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DingDevTool).call(this, props));

		var _this$props = _this.props;
		var type = _this$props.type;
		var url = _this$props.url;
		var room = _this$props.room;
		var dispatch = _this$props.dispatch;

		if (!socket) {
			var io = require("socket.io-client");
			socket = io.connect(url);
		}
		socket.on("open", function (data) {
			console.log("连接成功");
		});
		if (type == "client") {
			socket.emit("setDebug", { "room": room });
		} else if (type == "debug") {
			socket.emit("subscribe", { "room": room });
			socket.on("responseAction", function (data) {
				data = Object.assign({}, data, { SOCKET_DEBUG: true });
				dispatch(data);
			});

			socket.on("responseState", function (data) {
				console.log(data);
			});
		}
		return _this;
	}

	_createClass(DingDevTool, [{
		key: "render",
		value: function render() {
			var type = this.props.type;

			var node = "";
			if (type == "debug") {
				node = _react2.default.createElement(_DevTools2.default, null);
			}
			return _react2.default.createElement(
				"div",
				null,
				node
			);
		}
	}]);

	return DingDevTool;
}(_react.Component);

DingDevTool.defaultProps = {
	type: "client",
	url: "http://127.0.0.1:8080",
	room: "debug"
};
exports.default = (0, _reactRedux.connect)()(DingDevTool);
var requestMiddleware = exports.requestMiddleware = function requestMiddleware(store) {
	return function (next) {
		return function (action) {
			if (socket) {
				socket.emit("requestAction", action);
				var result = next(action);
				socket.emit("requestState", store.getState());
				return result;
			} else {
				var _result = next(action);
				return _result;
			}
		};
	};
};

var responseMiddleware = exports.responseMiddleware = function responseMiddleware(store) {
	return function (next) {
		return function (action) {
			var result = null;
			if (action.SOCKET_DEBUG) {
				result = next(action);
			} else {
				result = store.getState();
			}
			return result;
		};
	};
};
var dingReduxDevTool = exports.dingReduxDevTool = (0, _redux.compose)(_DevTools2.default.instrument(), (0, _reduxDevtools.persistState)(window.location.href.match(/[?&]debug_session=([^&]+)\b/)));