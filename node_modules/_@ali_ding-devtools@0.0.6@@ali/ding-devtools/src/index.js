import React, { Component } from 'react';
import { connect } from "react-redux";
import DevTools from "./DevTools";
import {compose} from "redux";
import {persistState} from "redux-devtools";

let socket = null;

class DingDevTool extends Component {
	constructor(props){
		super(props);
		const {
			type,
			url,
			room,
			dispatch
		} = this.props;
		if(!socket){
			let io = require("socket.io-client");
			socket = io.connect(url);
		}
		socket.on("open",function(data){
			console.log("连接成功");
		});
		if(type == "client"){
			socket.emit("setDebug",{"room":room});
		}else if(type == "debug"){
			socket.emit("subscribe",{"room":room});
			socket.on("responseAction",function(data){
				data = Object.assign({},data,{SOCKET_DEBUG:true});
				dispatch(data);
			})

			socket.on("responseState",function(data){
				console.log(data);
			})
		}
	}

	static defaultProps = {
		type:"client",
		url: "http://127.0.0.1:8080",
		room:"debug"
	}

	render() {
		const {
			type
		} = this.props;
		let node = "";
		if(type == "debug"){
			node = <DevTools/>;
		}
		return (<div>
			{node}
		</div>);
	}
}

export default connect()(DingDevTool);

export const requestMiddleware = store => next => action =>{
	if(socket){
		socket.emit("requestAction",action);
		let result = next(action);
		socket.emit("requestState",store.getState());
		return result;
	}else{
		let result = next(action);
		return result;
	}
	
};

export const responseMiddleware = store => next => action =>{
	let result = null;
	if(action.SOCKET_DEBUG){
		result = next(action);
	}else{
		result = store.getState();
	}
	return result;
};
export const dingReduxDevTool = compose(
	DevTools.instrument(),
	persistState(window.location.href.match(/[?&]debug_session=([^&]+)\b/))
)

